#!/usr/bin/env python

import atexit
import dataclasses
import enum
import functools
import logging
import multiprocessing
import os
import subprocess
import sys
import threading
import time

import tabulate
import termcolor


def synchronized(member):
    """
    @synchronized decorator.

    Lock a method for synchronized access only. The lock is stored to
    the function or class instance, depending on what is available.

    Copied from https://stackoverflow.com/a/73283037/8386446.
    """

    @functools.wraps(member)
    def wrapper(*args, **kwargs):
        lock = vars(member).get("_synchronized_lock", None)
        result = ""
        try:
            if lock is None:
                lock = vars(member).setdefault(
                    "_synchronized_lock", multiprocessing.Lock())
            lock.acquire()
            result = member(*args, **kwargs)
            lock.release()
        except Exception as e:
            lock.release()
            raise e
        return result

    return wrapper


DASHBOARD_UPDATE_DELAY = 1
CONNECTION_CHECKING_DELAY = 10
SSH_COMMAND = ['ssh', '-o', 'IdentitiesOnly=yes', '-o',
               'UserKnownHostsFile=/dev/null', '-o', 'StrictHostKeyChecking=no']


def get_machine(host: str) -> 'Machine':

    def run_ssh(host: str, command: str) -> str:
        ssh_command = SSH_COMMAND + [host, command]
        return subprocess.check_output(ssh_command, encoding='utf-8', timeout=CONNECTION_CHECKING_DELAY*0.7, stderr=subprocess.DEVNULL).strip()

    os = run_ssh(host, 'uname -s')
    node = run_ssh(host, 'uname -n')

    try:
        lsb_release = run_ssh(host, 'cat /etc/lsb-release')
        if 'CHROMEOS_RELEASE_NAME=Chrome OS' in lsb_release:
            os = 'ChromeOS'
    except subprocess.CalledProcessError:
        pass

    if os != 'ChromeOS':
        return Machine(host, os, node)

    lines = lsb_release.splitlines()
    board = next(line for line in lines if line.startswith(
        'CHROMEOS_RELEASE_BOARD='))
    board = board[len('CHROMEOS_RELEASE_BOARD='):]
    build = next(line for line in lines if line.startswith(
        'CHROMEOS_RELEASE_VERSION='))
    build = build[len('CHROMEOS_RELEASE_VERSION='):]

    model = run_ssh(host, 'cros_config / name')
    sku = run_ssh(host, 'cros_config /identity sku-id')
    return DUT(host, os, node, board, model, sku, build)


@dataclasses.dataclass
class Machine:
    host: str
    os: str
    node: str


@dataclasses.dataclass
class DUT(Machine):
    board: str
    model: str
    sku: str
    build: str


class ConnectionState(enum.Enum):
    connected = 'Connected'
    connecting = 'Connecting'
    disconnected = 'Disconnected'

    def __str__(self):
        return self.value


@dataclasses.dataclass
class Target:
    local_port: int
    host: str
    remote_port: int

    machine: Machine | None = None
    machine_obsolete: bool = False
    connection: subprocess.Popen | None = None
    state: ConnectionState = ConnectionState.disconnected

    @synchronized
    def quick_refresh(self):
        if self.connection is not None and self.connection.poll() is not None:
            self.force_disconnect()
        if self.state == ConnectionState.connecting:
            logging.info('Host %s is connecting, try pinging.', self.host)
            ping_succeeded = self.ping(DASHBOARD_UPDATE_DELAY * 0.7)
            if ping_succeeded:
                self.state = ConnectionState.connected

    @synchronized
    def force_disconnect(self):
        if self.connection is not None:
            self.connection.kill()
            self.connection = None
        if self.machine is not None:
            self.machine_obsolete = True
        self.state = ConnectionState.disconnected

    @synchronized
    def update_info_if_needed(self):
        if self.machine is None or self.machine_obsolete:
            self.machine = get_machine(self.host)
            self.machine_obsolete = False

    def ping(self, timeout: float) -> bool:
        command = SSH_COMMAND + [self.host, 'true']
        try:
            exit_code = subprocess.call(
                command, timeout=timeout, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return exit_code == 0
        except subprocess.TimeoutExpired:
            return False

    def refresh(self):
        self.quick_refresh()

        if self.state == ConnectionState.disconnected:
            self.try_connect()
            return

        ping_succeeded = self.ping(CONNECTION_CHECKING_DELAY * 0.3)
        if not ping_succeeded:
            self.force_disconnect()
            return False

        try:
            self.update_info_if_needed()
            self.state = ConnectionState.connected
            return True
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
            self.force_disconnect()
            return False

    @synchronized
    def try_connect(self):
        assert self.connection is None
        forward_sig = f'{self.local_port}:localhost:{self.remote_port}'
        command = SSH_COMMAND + ['-NL', forward_sig, self.host]
        self.connection = subprocess.Popen(
            command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        self.state = ConnectionState.connecting

    @property
    def signature(self):
        return f'{self.local_port}:localhost:{self.remote_port}'

    @property
    def name(self):
        if self.machine is not None and self.machine.node != 'localhost':
            self.machine.node
        return self.host

def update_dashboard(targets: list[Target]):
    for target in targets:
        target.quick_refresh()

    rows: list[list[str]] = []
    for target in targets:
        state_color = {
            ConnectionState.connected: 'green',
            ConnectionState.disconnected: 'red',
            ConnectionState.connecting: 'yellow'
        }

        forward = f'{target.local_port} -> {target.remote_port}'

        model = f'{target.machine.model} ({target.machine.sku})' if isinstance(
            target.machine, DUT) else target.machine.os if target.machine else ''
        build = target.machine.build if isinstance(target.machine, DUT) else ''

        state = termcolor.colored(str(target.state), state_color[target.state])

        rows.append([target.name, forward, model, build, state])

    os.system('clear')
    print(tabulate.tabulate(rows, headers=[
        'Host', 'Policy', 'Model', 'Build', 'State']))


def check_connections(hosts: list[Target]):
    logging.info('Checking starts.')

    threads = []
    for host in hosts:
        t = threading.Thread(target=host.refresh)
        t.start()
        threads.append(t)
    for t in threads:
        t.join()

    logging.info('Checking finished.')


def print_usage():
    print('Usage: forward local_port:host[:remote_port] ...')


def main(args: list[str]):
    if len(args) == 0:
        print_usage()
        sys.exit(1)

    targets: list[Target] = []
    for arg in args:
        tokens = arg.split(':')
        if len(tokens) == 2:
            local_port = int(tokens[0])
            host = tokens[1]
            remote_port = 22
        elif len(tokens) == 3:
            local_port = int(tokens[0])
            host = tokens[1]
            remote_port = int(tokens[2])
        else:
            raise ValueError('Invalid argument: ' + arg)

        if local_port < 1024:
            raise ValueError('Invalid local port: ' + str(local_port))

        exit_code = subprocess.call(['lsof', '-i', f'tcp:{local_port}'])
        if exit_code == 0:
            raise ValueError('Port ' + str(local_port) + ' already in used.')

        targets.append(Target(local_port, host, remote_port))

    if len(targets) == 0:
        raise ValueError('No target.')

    def monitor_thread():
        while True:
            check_connections(targets)
            time.sleep(CONNECTION_CHECKING_DELAY)

    def atexit_listener():
        logging.warning('Cleanup connections ...')
        for t in targets:
            if t.state == ConnectionState.connected:
                command = SSH_COMMAND + \
                    ['-O', 'cancel', '-L', t.signature, t.host]
                subprocess.call(command)
                logging.info('Removed forward on port: %d', t.local_port)

    atexit.register(atexit_listener)

    threading.Thread(target=monitor_thread, daemon=True).start()

    while True:
        update_dashboard(targets)
        time.sleep(DASHBOARD_UPDATE_DELAY)


if __name__ == '__main__':
    logging.basicConfig(filename='ssh.log',
                        encoding='utf-8', level=logging.INFO)
    main(sys.argv[1:])
